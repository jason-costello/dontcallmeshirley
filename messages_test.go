package main

import (
	"database/sql"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

func TestCSVLine_ToLine1(t *testing.T) {
	tests := []struct {
		name     string
		c        string
		wantLine ParsedLine
		wantErr  error
	}{
		{
			name: "parses SEL line",
			c:    "SEL,,496,2286,4CA4E5,27215,2010/02/19,18:06:07.710,2010/02/19,18:06:07.710,RYR1427",
			wantLine: ParsedLine{
				MsgType:          "SEL",
				TransType:        sql.NullString{Valid: false, String: ""},
				SessionID:        sql.NullString{Valid: true, String: "496"},
				AircraftID:       "2286",
				HexIdent:         sql.NullString{Valid: true, String: "4CA4E5"},
				FlightID:         "27215",
				DateMsgGenerated: time.Date(2010, 02, 19, 0, 0, 0, 0, time.UTC),
				TimeMsgGenerated: time.Date(0000, 01, 01, 18, 06, 07, 710000000, time.UTC),
				DateMsgLogged:    time.Date(2010, 02, 19, 0, 0, 0, 0, time.UTC),
				TimeMsgLogged:    time.Date(0000, 01, 01, 18, 06, 07, 710000000, time.UTC),
				Callsign:         sql.NullString{Valid: true, String: "RYR1427"},
				Altitude:         sql.NullInt32{Valid: false, Int32: 0},
				GroundSpeed:      sql.NullFloat64{Valid: false, Float64: 0.0},
				Track:            sql.NullFloat64{Valid: false, Float64: 0.0},
				Longitude:        sql.NullFloat64{Valid: false, Float64: 0.0},
				Latitude:         sql.NullFloat64{Valid: false, Float64: 0.0},
				VerticalRate:     sql.NullFloat64{Valid: false, Float64: 0.0},
				Squawk:           sql.NullString{Valid: false, String: ""},
				Alert:            sql.NullBool{Valid: false, Bool: false},
				Emergency:        sql.NullBool{Valid: false, Bool: false},
				Ident:            sql.NullBool{Valid: false, Bool: false},
				IsOnGround:       sql.NullBool{Valid: false, Bool: false},
			},
			wantErr: nil,
		},
		{
			name: "parses ID line",
			c:    "ID,,496,7162,405637,27928,2010/02/19,18:06:07.115,2010/02/19,18:06:07.115,EZY691A",
			wantLine: ParsedLine{
				MsgType:          "ID",
				TransType:        sql.NullString{Valid: false, String: ""},
				SessionID:        sql.NullString{Valid: true, String: "496"},
				AircraftID:       "7162",
				HexIdent:         sql.NullString{Valid: true, String: "405637"},
				FlightID:         "27928",
				DateMsgGenerated: time.Date(2010, 02, 19, 0, 0, 0, 0, time.UTC),
				TimeMsgGenerated: time.Date(0000, 01, 01, 18, 06, 07, 115000000, time.UTC),
				DateMsgLogged:    time.Date(2010, 02, 19, 0, 0, 0, 0, time.UTC),
				TimeMsgLogged:    time.Date(0000, 01, 01, 18, 06, 07, 115000000, time.UTC),
				Callsign:         sql.NullString{Valid: true, String: "EZY691A"},
				Altitude:         sql.NullInt32{Valid: false, Int32: 0},
				GroundSpeed:      sql.NullFloat64{Valid: false, Float64: 0.0},
				Track:            sql.NullFloat64{Valid: false, Float64: 0.0},
				Longitude:        sql.NullFloat64{Valid: false, Float64: 0.0},
				Latitude:         sql.NullFloat64{Valid: false, Float64: 0.0},
				VerticalRate:     sql.NullFloat64{Valid: false, Float64: 0.0},
				Squawk:           sql.NullString{Valid: false, String: ""},
				Alert:            sql.NullBool{Valid: false, Bool: false},
				Emergency:        sql.NullBool{Valid: false, Bool: false},
				Ident:            sql.NullBool{Valid: false, Bool: false},
				IsOnGround:       sql.NullBool{Valid: false, Bool: false},
			},
			wantErr: nil,
		},
		{
			name: "parses AIR line",
			c:    "AIR,,496,5906,400F01,27931,2010/02/19,18:06:07.128,2010/02/19,18:06:07.128",
			wantLine: ParsedLine{
				MsgType:          "AIR",
				TransType:        sql.NullString{Valid: false, String: ""},
				SessionID:        sql.NullString{Valid: true, String: "496"},
				AircraftID:       "5906",
				HexIdent:         sql.NullString{Valid: true, String: "400F01"},
				FlightID:         "27931",
				DateMsgGenerated: time.Date(2010, 02, 19, 0, 0, 0, 0, time.UTC),
				TimeMsgGenerated: time.Date(0000, 01, 01, 18, 06, 07, 128000000, time.UTC),
				DateMsgLogged:    time.Date(2010, 02, 19, 0, 0, 0, 0, time.UTC),
				TimeMsgLogged:    time.Date(0000, 01, 01, 18, 06, 07, 128000000, time.UTC),
				Callsign:         sql.NullString{Valid: false, String: ""},
				Altitude:         sql.NullInt32{Valid: false, Int32: 0},
				GroundSpeed:      sql.NullFloat64{Valid: false, Float64: 0.0},
				Track:            sql.NullFloat64{Valid: false, Float64: 0.0},
				Longitude:        sql.NullFloat64{Valid: false, Float64: 0.0},
				Latitude:         sql.NullFloat64{Valid: false, Float64: 0.0},
				VerticalRate:     sql.NullFloat64{Valid: false, Float64: 0.0},
				Squawk:           sql.NullString{Valid: false, String: ""},
				Alert:            sql.NullBool{Valid: false, Bool: false},
				Emergency:        sql.NullBool{Valid: false, Bool: false},
				Ident:            sql.NullBool{Valid: false, Bool: false},
				IsOnGround:       sql.NullBool{Valid: false, Bool: false},
			},
			wantErr: nil,
		},
		{
			name: "parses STA line",
			c:    "STA,,5,179,400AE7,10103,2008/11/28,14:58:51.153,2008/11/28,14:58:51.153,RM",
			wantLine: ParsedLine{
				MsgType:          "STA",
				TransType:        sql.NullString{Valid: false, String: ""},
				SessionID:        sql.NullString{Valid: true, String: "5"},
				AircraftID:       "179",
				HexIdent:         sql.NullString{Valid: true, String: "400AE7"},
				FlightID:         "10103",
				DateMsgGenerated: time.Date(2008, 11, 28, 0, 0, 0, 0, time.UTC),
				TimeMsgGenerated: time.Date(0000, 01, 01, 14, 58, 51, 153000000, time.UTC),
				DateMsgLogged:    time.Date(2008, 11, 28, 0, 0, 0, 0, time.UTC),
				TimeMsgLogged:    time.Date(0000, 01, 01, 14, 58, 51, 153000000, time.UTC),
				Callsign:         sql.NullString{Valid: true, String: "RM"},
				Altitude:         sql.NullInt32{Valid: false, Int32: 0},
				GroundSpeed:      sql.NullFloat64{Valid: false, Float64: 0.0},
				Track:            sql.NullFloat64{Valid: false, Float64: 0.0},
				Longitude:        sql.NullFloat64{Valid: false, Float64: 0.0},
				Latitude:         sql.NullFloat64{Valid: false, Float64: 0.0},
				VerticalRate:     sql.NullFloat64{Valid: false, Float64: 0.0},
				Squawk:           sql.NullString{Valid: false, String: ""},
				Alert:            sql.NullBool{Valid: false, Bool: false},
				Emergency:        sql.NullBool{Valid: false, Bool: false},
				Ident:            sql.NullBool{Valid: false, Bool: false},
				IsOnGround:       sql.NullBool{Valid: false, Bool: false},
			},
			wantErr: nil,
		},
		{
			name: "parses CLK line",
			c:    "CLK,,496,-1,,-1,2010/02/19,18:18:19.036,2010/02/19,18:18:19.036",
			wantLine: ParsedLine{
				MsgType:          "CLK",
				TransType:        sql.NullString{Valid: false, String: ""},
				SessionID:        sql.NullString{Valid: true, String: "496"},
				AircraftID:       "-1",
				HexIdent:         sql.NullString{Valid: false, String: ""},
				FlightID:         "-1",
				DateMsgGenerated: time.Date(2010, 02, 19, 0, 0, 0, 0, time.UTC),
				TimeMsgGenerated: time.Date(0000, 01, 01, 18, 18, 19, 36000000, time.UTC),
				DateMsgLogged:    time.Date(2010, 02, 19, 0, 0, 0, 0, time.UTC),
				TimeMsgLogged:    time.Date(0000, 01, 01, 18, 18, 19, 36000000, time.UTC),
				Callsign:         sql.NullString{Valid: false, String: ""},
				Altitude:         sql.NullInt32{Valid: false, Int32: 0},
				GroundSpeed:      sql.NullFloat64{Valid: false, Float64: 0.0},
				Track:            sql.NullFloat64{Valid: false, Float64: 0.0},
				Longitude:        sql.NullFloat64{Valid: false, Float64: 0.0},
				Latitude:         sql.NullFloat64{Valid: false, Float64: 0.0},
				VerticalRate:     sql.NullFloat64{Valid: false, Float64: 0.0},
				Squawk:           sql.NullString{Valid: false, String: ""},
				Alert:            sql.NullBool{Valid: false, Bool: false},
				Emergency:        sql.NullBool{Valid: false, Bool: false},
				Ident:            sql.NullBool{Valid: false, Bool: false},
				IsOnGround:       sql.NullBool{Valid: false, Bool: false},
			},
			wantErr: nil,
		},
		{
			name: "parses MSG1 line",
			c:    "MSG,1,145,256,7404F2,11267,2008/11/28,23:48:18.611,2008/11/28,23:53:19.161,RJA1118,,,,,,,,,,,",
			wantLine: ParsedLine{
				MsgType:          "MSG",
				TransType:        sql.NullString{Valid: true, String: "1"},
				SessionID:        sql.NullString{Valid: true, String: "145"},
				AircraftID:       "256",
				HexIdent:         sql.NullString{Valid: true, String: "7404F2"},
				FlightID:         "11267",
				DateMsgGenerated: time.Date(2008, 11, 28, 0, 0, 0, 0, time.UTC),
				TimeMsgGenerated: time.Date(0000, 01, 01, 23, 48, 18, 611000000, time.UTC),
				DateMsgLogged:    time.Date(2008, 11, 28, 0, 0, 0, 0, time.UTC),
				TimeMsgLogged:    time.Date(0000, 01, 01, 23, 53, 19, 161000000, time.UTC),
				Callsign:         sql.NullString{Valid: true, String: "RJA1118"},
				Altitude:         sql.NullInt32{Valid: false, Int32: 0},
				GroundSpeed:      sql.NullFloat64{Valid: false, Float64: 0.0},
				Track:            sql.NullFloat64{Valid: false, Float64: 0.0},
				Longitude:        sql.NullFloat64{Valid: false, Float64: 0.0},
				Latitude:         sql.NullFloat64{Valid: false, Float64: 0.0},
				VerticalRate:     sql.NullFloat64{Valid: false, Float64: 0.0},
				Squawk:           sql.NullString{Valid: false, String: ""},
				Alert:            sql.NullBool{Valid: false, Bool: false},
				Emergency:        sql.NullBool{Valid: false, Bool: false},
				Ident:            sql.NullBool{Valid: false, Bool: false},
				IsOnGround:       sql.NullBool{Valid: false, Bool: false},
			},
			wantErr: nil,
		},
		{
			name: "parses MSG2 line",
			c:    "MSG,2,496,603,400CB6,13168,2008/10/13,12:24:32.414,2008/10/13,12:28:52.074,,,0,76.4,258.3,54.05735,-4.38826,,,,,0",
			wantLine: ParsedLine{
				MsgType:          "MSG",
				TransType:        sql.NullString{Valid: true, String: "2"},
				SessionID:        sql.NullString{Valid: true, String: "496"},
				AircraftID:       "603",
				HexIdent:         sql.NullString{Valid: true, String: "400CB6"},
				FlightID:         "13168",
				DateMsgGenerated: time.Date(2008, 10, 13, 0, 0, 0, 0, time.UTC),
				TimeMsgGenerated: time.Date(0000, 01, 01, 12, 24, 32, 414000000, time.UTC),
				DateMsgLogged:    time.Date(2008, 10, 13, 0, 0, 0, 0, time.UTC),
				TimeMsgLogged:    time.Date(0000, 01, 01, 12, 28, 52, 74000000, time.UTC),
				Callsign:         sql.NullString{Valid: false, String: ""},
				Altitude:         sql.NullInt32{Valid: false, Int32: 0},
				GroundSpeed:      sql.NullFloat64{Valid: true, Float64: 0.0},
				Track:            sql.NullFloat64{Valid: true, Float64: 76.4},
				Longitude:        sql.NullFloat64{Valid: true, Float64: 258.3},
				Latitude:         sql.NullFloat64{Valid: true, Float64: 54.05735},
				VerticalRate:     sql.NullFloat64{Valid: true, Float64: -4.38826},
				Squawk:           sql.NullString{Valid: false, String: ""},
				Alert:            sql.NullBool{Valid: false, Bool: false},
				Emergency:        sql.NullBool{Valid: false, Bool: false},
				Ident:            sql.NullBool{Valid: false, Bool: false},
				IsOnGround:       sql.NullBool{Valid: true, Bool: true},
			},
			wantErr: nil,
		},
		{
			name: "parses MSG3, line",
			c:    "MSG,3,496,211,4CA2D6,10057,2008/11/28,14:53:50.594,2008/11/28,14:58:51.153,,37000,,,51.45735,-1.02826,,,0,0,0,0",
			wantLine: ParsedLine{
				MsgType:          "MSG",
				TransType:        sql.NullString{Valid: true, String: "3"},
				SessionID:        sql.NullString{Valid: true, String: "496"},
				AircraftID:       "211",
				HexIdent:         sql.NullString{Valid: true, String: "4CA2D6"},
				FlightID:         "10057",
				DateMsgGenerated: time.Date(2008, 11, 28, 0, 0, 0, 0, time.UTC),
				TimeMsgGenerated: time.Date(0000, 01, 01, 14, 53, 50, 594000000, time.UTC),
				DateMsgLogged:    time.Date(2008, 11, 28, 0, 0, 0, 0, time.UTC),
				TimeMsgLogged:    time.Date(0000, 01, 01, 14, 58, 51, 153000000, time.UTC),
				Callsign:         sql.NullString{Valid: false, String: ""},
				Altitude:         sql.NullInt32{Valid: true, Int32: 37000},
				GroundSpeed:      sql.NullFloat64{Valid: false, Float64: 0.0},
				Track:            sql.NullFloat64{Valid: false, Float64: 0.0},
				Longitude:        sql.NullFloat64{Valid: true, Float64: 51.45735},
				Latitude:         sql.NullFloat64{Valid: true, Float64: -1.02826},
				VerticalRate:     sql.NullFloat64{Valid: false, Float64: 0.0},
				Squawk:           sql.NullString{Valid: false, String: ""},
				Alert:            sql.NullBool{Valid: true, Bool: true},
				Emergency:        sql.NullBool{Valid: true, Bool: true},
				Ident:            sql.NullBool{Valid: true, Bool: true},
				IsOnGround:       sql.NullBool{Valid: true, Bool: true},
			},
			wantErr: nil,
		},
		{
			name: "parses MSG4 line",
			c:    "MSG,4,496,469,4CA767,27854,2010/02/19,17:58:13.039,2010/02/19,17:58:13.368,,,288.6,103.2,,,-832,,,,,",
			wantLine: ParsedLine{
				MsgType:          "MSG",
				TransType:        sql.NullString{Valid: true, String: "4"},
				SessionID:        sql.NullString{Valid: true, String: "496"},
				AircraftID:       "469",
				HexIdent:         sql.NullString{Valid: true, String: "4CA767"},
				FlightID:         "27854",
				DateMsgGenerated: time.Date(2010, 02, 19, 0, 0, 0, 0, time.UTC),
				TimeMsgGenerated: time.Date(0000, 01, 01, 17, 58, 13, 39000000, time.UTC),
				DateMsgLogged:    time.Date(2010, 02, 19, 0, 0, 0, 0, time.UTC),
				TimeMsgLogged:    time.Date(0000, 01, 01, 17, 58, 13, 368000000, time.UTC),
				Callsign:         sql.NullString{Valid: false, String: ""},
				Altitude:         sql.NullInt32{Valid: false, Int32: 0},
				GroundSpeed:      sql.NullFloat64{Valid: true, Float64: 288.6},
				Track:            sql.NullFloat64{Valid: true, Float64: 103.2},
				Longitude:        sql.NullFloat64{Valid: false, Float64: 0.0},
				Latitude:         sql.NullFloat64{Valid: false, Float64: 0.0},
				VerticalRate:     sql.NullFloat64{Valid: true, Float64: -832.0},
				Squawk:           sql.NullString{Valid: false, String: ""},
				Alert:            sql.NullBool{Valid: false, Bool: false},
				Emergency:        sql.NullBool{Valid: false, Bool: false},
				Ident:            sql.NullBool{Valid: false, Bool: false},
				IsOnGround:       sql.NullBool{Valid: false, Bool: false},
			},
			wantErr: nil,
		},
		{
			name: "parses MSG5 line",
			c:    "MSG,5,496,329,394A65,27868,2010/02/19,17:58:12.644,2010/02/19,17:58:13.368,,10000,,,,,,,0,,0,0",
			wantLine: ParsedLine{
				MsgType:          "MSG",
				TransType:        sql.NullString{Valid: true, String: "5"},
				SessionID:        sql.NullString{Valid: true, String: "496"},
				AircraftID:       "329",
				HexIdent:         sql.NullString{Valid: true, String: "394A65"},
				FlightID:         "27868",
				DateMsgGenerated: time.Date(2010, 02, 19, 0, 0, 0, 0, time.UTC),
				TimeMsgGenerated: time.Date(0000, 01, 01, 17, 58, 12, 644000000, time.UTC),
				DateMsgLogged:    time.Date(2010, 02, 19, 0, 0, 0, 0, time.UTC),
				TimeMsgLogged:    time.Date(0000, 01, 01, 17, 58, 13, 368000000, time.UTC),
				Callsign:         sql.NullString{Valid: false, String: ""},
				Altitude:         sql.NullInt32{Valid: true, Int32: 10000},
				GroundSpeed:      sql.NullFloat64{Valid: false, Float64: 0.0},
				Track:            sql.NullFloat64{Valid: false, Float64: 0.0},
				Longitude:        sql.NullFloat64{Valid: false, Float64: 0.0},
				Latitude:         sql.NullFloat64{Valid: false, Float64: 0.0},
				VerticalRate:     sql.NullFloat64{Valid: false, Float64: 0.0},
				Squawk:           sql.NullString{Valid: false, String: ""},
				Alert:            sql.NullBool{Valid: true, Bool: true},
				Emergency:        sql.NullBool{Valid: false, Bool: false},
				Ident:            sql.NullBool{Valid: true, Bool: true},
				IsOnGround:       sql.NullBool{Valid: true, Bool: true},
			}, wantErr: nil,
		},
		{
			name: "parses MSG6 line",
			c:    "MSG,6,496,237,4CA215,27864,2010/02/19,17:58:12.846,2010/02/19,17:58:13.368,,33325,,,,,,0271,0,0,0,0",
			wantLine: ParsedLine{
				MsgType:          "MSG",
				TransType:        sql.NullString{Valid: true, String: "6"},
				SessionID:        sql.NullString{Valid: true, String: "496"},
				AircraftID:       "237",
				HexIdent:         sql.NullString{Valid: true, String: "4CA215"},
				FlightID:         "27864",
				DateMsgGenerated: time.Date(2010, 02, 19, 0, 0, 0, 0, time.UTC),
				TimeMsgGenerated: time.Date(0000, 01, 01, 17, 58, 12, 846000000, time.UTC),
				DateMsgLogged:    time.Date(2010, 02, 19, 0, 0, 0, 0, time.UTC),
				TimeMsgLogged:    time.Date(0000, 01, 01, 17, 58, 13, 368000000, time.UTC),
				Callsign:         sql.NullString{Valid: false, String: ""},
				Altitude:         sql.NullInt32{Valid: true, Int32: 33325},
				GroundSpeed:      sql.NullFloat64{Valid: false, Float64: 0.0},
				Track:            sql.NullFloat64{Valid: false, Float64: 0.0},
				Longitude:        sql.NullFloat64{Valid: false, Float64: 0.0},
				Latitude:         sql.NullFloat64{Valid: false, Float64: 0.0},
				VerticalRate:     sql.NullFloat64{Valid: false, Float64: 0.0},
				Squawk:           sql.NullString{Valid: true, String: "0271"},
				Alert:            sql.NullBool{Valid: true, Bool: true},
				Emergency:        sql.NullBool{Valid: true, Bool: true},
				Ident:            sql.NullBool{Valid: true, Bool: true},
				IsOnGround:       sql.NullBool{Valid: true, Bool: true},
			}, wantErr: nil,
		},
		{
			name: "parses MSG7 line",
			c:    "MSG,7,496,742,51106E,27929,2011/03/06,07:57:36.523,2011/03/06,07:57:37.054,,3775,,,,,,,,,,0",
			wantLine: ParsedLine{
				MsgType:          "MSG",
				TransType:        sql.NullString{Valid: true, String: "7"},
				SessionID:        sql.NullString{Valid: true, String: "496"},
				AircraftID:       "742",
				HexIdent:         sql.NullString{Valid: true, String: "51106E"},
				FlightID:         "27929",
				DateMsgGenerated: time.Date(2011, 03, 06, 0, 0, 0, 0, time.UTC),
				TimeMsgGenerated: time.Date(0000, 01, 01, 07, 57, 36, 523000000, time.UTC),
				DateMsgLogged:    time.Date(2011, 03, 06, 0, 0, 0, 0, time.UTC),
				TimeMsgLogged:    time.Date(0000, 01, 01, 07, 57, 37, 54000000, time.UTC),
				Callsign:         sql.NullString{Valid: false, String: ""},
				Altitude:         sql.NullInt32{Valid: true, Int32: 3775},
				GroundSpeed:      sql.NullFloat64{Valid: false, Float64: 0.0},
				Track:            sql.NullFloat64{Valid: false, Float64: 0.0},
				Longitude:        sql.NullFloat64{Valid: false, Float64: 0.0},
				Latitude:         sql.NullFloat64{Valid: false, Float64: 0.0},
				VerticalRate:     sql.NullFloat64{Valid: false, Float64: 0.0},
				Squawk:           sql.NullString{Valid: false, String: ""},
				Alert:            sql.NullBool{Valid: false, Bool: false},
				Emergency:        sql.NullBool{Valid: false, Bool: false},
				Ident:            sql.NullBool{Valid: false, Bool: false},
				IsOnGround:       sql.NullBool{Valid: true, Bool: true},
			}, wantErr: nil,
		},
		{
			name: "parses MSG8 Input Line",
			c:    "MSG,8,496,194,405F4E,27884,2010/02/19,17:58:13.244,2010/02/19,17:58:13.368,,,,,,,,,,,,0",
			wantLine: ParsedLine{
				MsgType:          "MSG",
				TransType:        sql.NullString{Valid: true, String: "8"},
				SessionID:        sql.NullString{Valid: true, String: "496"},
				AircraftID:       "194",
				HexIdent:         sql.NullString{Valid: true, String: "405F4E"},
				FlightID:         "27884",
				DateMsgGenerated: time.Date(2010, 02, 19, 0, 0, 0, 0, time.UTC),
				TimeMsgGenerated: time.Date(0000, 01, 01, 17, 58, 13, 244000000, time.UTC),
				DateMsgLogged:    time.Date(2010, 02, 19, 0, 0, 0, 0, time.UTC),
				TimeMsgLogged:    time.Date(0000, 01, 01, 17, 58, 13, 368000000, time.UTC),
				Callsign:         sql.NullString{Valid: false, String: ""},
				Altitude:         sql.NullInt32{Valid: false, Int32: 0},
				GroundSpeed:      sql.NullFloat64{Valid: false, Float64: 0.0},
				Track:            sql.NullFloat64{Valid: false, Float64: 0.0},
				Longitude:        sql.NullFloat64{Valid: false, Float64: 0.0},
				Latitude:         sql.NullFloat64{Valid: false, Float64: 0.0},
				VerticalRate:     sql.NullFloat64{Valid: false, Float64: 0.0},
				Squawk:           sql.NullString{Valid: false, String: ""},
				Alert:            sql.NullBool{Valid: false, Bool: false},
				Emergency:        sql.NullBool{Valid: false, Bool: false},
				Ident:            sql.NullBool{Valid: false, Bool: false},
				IsOnGround:       sql.NullBool{Valid: true, Bool: true},
			}, wantErr: nil,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			pl, err := Parse(tt.c)
			assert.Equal(t, tt.wantErr, err)
			assert.Equal(t, tt.wantLine, pl)
		})
	}
}
